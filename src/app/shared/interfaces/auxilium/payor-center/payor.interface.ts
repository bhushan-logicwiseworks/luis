export interface Payor {
    id: number;
    billto: string;
    branchid: number;
    name: string;
    phone: string;
    address: string;
    address2: string;
    city: string;
    state: string;
    zip: string;
    pricecode: string;
    ar: string;
    percentpaid: number;
    primarybillform: string;
    account: string;
    payortype: string;
    pin: string;
    adddate: string;
    adduserid: string;
    flatfee: number;
    kct: string;
    payto: string;
    notes: string;
    senderid: string;
    idqualifier: string;
    receiverid: string;
    sendercode: string;
    receivercode: string;
    planqualifier: string;
    plancode: string;
    claimfile: string;
    crlf: boolean;
    donotsendtaxonomyon837copay: boolean;
    submitter: string;
    claimindicator: string;
    spandates: boolean;
    rentcap: number;
    ocnanumber: string;
    medigap: string;
    secondarybillform: string;
    signature: string;
    pos: string;
    tos: string;
    taxable: boolean;
    payorcategory: string;
    payorpercent: number;
    inactive: boolean;
    payorstatus: string;
    block24k: boolean;
    upinprov: number;
    refprov: number;
    enablebranchbilling: boolean;
    npi: string;
    salesid: number;
    _1500box1: string;
    fax: string;
    printsocsec: boolean;
    email: string;
    kitbilling: boolean;
    sendfacility4pos11: boolean;
    create0oi: boolean;
    npionly: boolean;
    realtimeedi: boolean;
    ediexportpath: string;
    use5010: boolean;
    useicd10: boolean;
    testprod5010: string;
    testprodedi: string;
    sendtourl: string;
    edipassword: string;
    edisender: string;
    edireceiver: string;
    timelyfilingdays: number;
    resubmitdays: number;
    recurcycledays: number;
    pwkfaxcover: string;
    orderingphyreq: boolean;
    sendtaxonomy: boolean;
    usepatientinfoin2310c: boolean;
    contactname: string;
    phoneextension: string;
    ernref2uid: string;
    componentelementseparator: string;
    repetitionseparator: string;
    securityinfo: string;
    securityinfoqualifier: string;
    receivername: string;
    clearinghouseid: number;
    clearinghousepayorid: string;
    usepatientinfoinbox32: boolean;
    box33bqualifier: string;
    box33bvalue: string;
    usecompanyinfoinbox32: boolean;
    taxid: string;
    usepayernpiandtaxid: boolean;
    holdfrombilling: boolean;
    holdfrombillinguntildate: string;
    usepayerbranchinfoinhcfa1500box33: boolean;
    holdprimaryifthisissecondary: boolean;
}

export type GetPayorResponse = Payor[];
